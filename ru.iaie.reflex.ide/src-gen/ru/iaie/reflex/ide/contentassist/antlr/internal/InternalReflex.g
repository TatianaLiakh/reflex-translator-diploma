/*
 * generated by Xtext 2.19.0
 */
grammar InternalReflex;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ru.iaie.reflex.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ru.iaie.reflex.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ru.iaie.reflex.services.ReflexGrammarAccess;

}
@parser::members {
	private ReflexGrammarAccess grammarAccess;

	public void setGrammarAccess(ReflexGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcess
entryRuleProcess
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessAccess().getGroup()); }
		(rule__Process__Group__0)
		{ after(grammarAccess.getProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegister
entryRuleRegister
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterAccess().getGroup()); }
		(rule__Register__Group__0)
		{ after(grammarAccess.getRegisterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getGroup()); }
		(rule__Const__Group__0)
		{ after(grammarAccess.getConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnum
entryRuleEnum
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumAccess().getGroup()); }
		(rule__Enum__Group__0)
		{ after(grammarAccess.getEnumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumMember
entryRuleEnumMember
:
{ before(grammarAccess.getEnumMemberRule()); }
	 ruleEnumMember
{ after(grammarAccess.getEnumMemberRule()); } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumMemberAccess().getGroup()); }
		(rule__EnumMember__Group__0)
		{ after(grammarAccess.getEnumMemberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getExprKeyword()); }
		'expr'
		{ after(grammarAccess.getExpressionAccess().getExprKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCType
entryRuleCType
:
{ before(grammarAccess.getCTypeRule()); }
	 ruleCType
{ after(grammarAccess.getCTypeRule()); } 
	 EOF 
;

// Rule CType
ruleCType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCTypeAccess().getAlternatives()); }
		(rule__CType__Alternatives)
		{ after(grammarAccess.getCTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RegisterType
ruleRegisterType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterTypeAccess().getAlternatives()); }
		(rule__RegisterType__Alternatives)
		{ after(grammarAccess.getRegisterTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CTypeSignSpec
ruleCTypeSignSpec
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getAlternatives()); }
		(rule__CTypeSignSpec__Alternatives)
		{ after(grammarAccess.getCTypeSignSpecAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_0()); }
		(rule__CType__Group_0__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_1()); }
		(rule__CType__Group_1__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_2()); }
		(rule__CType__Group_2__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_3()); }
		(rule__CType__Group_3__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Alternatives_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()); }
		RULE_SHORT_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()); }
		RULE_INT_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()); }
		RULE_LONG_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
		('input')
		{ after(grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
		('output')
		{ after(grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CTypeSignSpec__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0()); }
		('signed')
		{ after(grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1()); }
		('unsigned')
		{ after(grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
	(rule__Program__NameAssignment_1)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getTicksAssignment_3()); }
	(rule__Program__TicksAssignment_3)?
	{ after(grammarAccess.getProgramAccess().getTicksAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getConstsAssignment_4()); }
	(rule__Program__ConstsAssignment_4)*
	{ after(grammarAccess.getProgramAccess().getConstsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getEnumsAssignment_5()); }
	(rule__Program__EnumsAssignment_5)*
	{ after(grammarAccess.getProgramAccess().getEnumsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__6__Impl
	rule__Program__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getFunctionsAssignment_6()); }
	(rule__Program__FunctionsAssignment_6)*
	{ after(grammarAccess.getProgramAccess().getFunctionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__7__Impl
	rule__Program__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRegistersAssignment_7()); }
	(rule__Program__RegistersAssignment_7)*
	{ after(grammarAccess.getProgramAccess().getRegistersAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__8__Impl
	rule__Program__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProcessesAssignment_8()); }
	(rule__Program__ProcessesAssignment_8)*
	{ after(grammarAccess.getProgramAccess().getProcessesAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getProcKeyword_0()); }
	'proc'
	{ after(grammarAccess.getProcessAccess().getProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getNameAssignment_1()); }
	(rule__Process__NameAssignment_1)
	{ after(grammarAccess.getProcessAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__2__Impl
	rule__Process__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__3__Impl
	rule__Process__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getStatesAssignment_3()); }
	(rule__Process__StatesAssignment_3)*
	{ after(grammarAccess.getProcessAccess().getStatesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }
	'state'
	{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
	(rule__State__NameAssignment_1)
	{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0()); }
	(rule__Function__ReturnTypeAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getArgTypesAssignment_3()); }
	(rule__Function__ArgTypesAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getArgTypesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
	(rule__Function__Group_4__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1()); }
	(rule__Function__ArgTypesAssignment_4_1)
	{ after(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Register__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__0__Impl
	rule__Register__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getTypeAssignment_0()); }
	(rule__Register__TypeAssignment_0)
	{ after(grammarAccess.getRegisterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__1__Impl
	rule__Register__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
	(rule__Register__NameAssignment_1)
	{ after(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__2__Impl
	rule__Register__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getAddr1Assignment_2()); }
	(rule__Register__Addr1Assignment_2)
	{ after(grammarAccess.getRegisterAccess().getAddr1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__3__Impl
	rule__Register__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getAddr2Assignment_3()); }
	(rule__Register__Addr2Assignment_3)
	{ after(grammarAccess.getRegisterAccess().getAddr2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getRegSizeAssignment_4()); }
	(rule__Register__RegSizeAssignment_4)
	{ after(grammarAccess.getRegisterAccess().getRegSizeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__0__Impl
	rule__Const__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstKeyword_0()); }
	'const'
	{ after(grammarAccess.getConstAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__1__Impl
	rule__Const__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstIdAssignment_1()); }
	(rule__Const__ConstIdAssignment_1)
	{ after(grammarAccess.getConstAccess().getConstIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__2__Impl
	rule__Const__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstValueAssignment_2()); }
	(rule__Const__ConstValueAssignment_2)
	{ after(grammarAccess.getConstAccess().getConstValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getConstAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
	'enum'
	{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumMembersAssignment_1()); }
	(rule__Enum__EnumMembersAssignment_1)
	{ after(grammarAccess.getEnumAccess().getEnumMembersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getGroup_2()); }
	(rule__Enum__Group_2__0)*
	{ after(grammarAccess.getEnumAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group_2__0__Impl
	rule__Enum__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1()); }
	(rule__Enum__EnumMembersAssignment_2_1)
	{ after(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMember__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__0__Impl
	rule__EnumMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
	(rule__EnumMember__NameAssignment_0)
	{ after(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__1__Impl
	rule__EnumMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getValueAssignment_2()); }
	(rule__EnumMember__ValueAssignment_2)
	{ after(grammarAccess.getEnumMemberAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_0__0__Impl
	rule__CType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_0_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1()); }
	RULE_VOID_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_1__0__Impl
	rule__CType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_1_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1()); }
	RULE_FLOAT_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_2__0__Impl
	rule__CType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_2_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1()); }
	RULE_DOUBLE_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__0__Impl
	rule__CType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_3_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__1__Impl
	rule__CType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1()); }
	(rule__CType__SignSpecAssignment_3_1)?
	{ after(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getAlternatives_3_2()); }
	(rule__CType__Alternatives_3_2)
	{ after(grammarAccess.getCTypeAccess().getAlternatives_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__TicksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getTicksTactTerminalRuleCall_3_0()); }
		RULE_TACT
		{ after(grammarAccess.getProgramAccess().getTicksTactTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ConstsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0()); }
		ruleConst
		{ after(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__EnumsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_5_0()); }
		ruleEnum
		{ after(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_6_0()); }
		ruleFunction
		{ after(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__RegistersAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_7_0()); }
		ruleRegister
		{ after(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ProcessesAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_8_0()); }
		ruleProcess
		{ after(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__StatesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_3_0()); }
		ruleState
		{ after(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgTypesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgTypesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0()); }
		ruleRegisterType
		{ after(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Addr1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getAddr1INTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRegisterAccess().getAddr1INTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Addr2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getAddr2INTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getRegisterAccess().getAddr2INTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__RegSizeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0()); }
		RULE_REG_SIZE
		{ after(grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ConstIdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ConstValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__EnumMembersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_1_0()); }
		ruleEnumMember
		{ after(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__EnumMembersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_2_1_0()); }
		ruleEnumMember
		{ after(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__SignSpecAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0()); }
		ruleCTypeSignSpec
		{ after(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VOID_C_TYPE : 'void';

RULE_FLOAT_C_TYPE : 'float';

RULE_DOUBLE_C_TYPE : 'double';

RULE_SHORT_C_TYPE : 'short';

RULE_INT_C_TYPE : 'int';

RULE_LONG_C_TYPE : 'long';

RULE_TACT : 'tact';

RULE_REG_SIZE : ('8'|'16');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
