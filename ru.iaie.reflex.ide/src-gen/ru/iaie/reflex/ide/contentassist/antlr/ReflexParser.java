/*
 * generated by Xtext 2.19.0
 */
package ru.iaie.reflex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ru.iaie.reflex.ide.contentassist.antlr.internal.InternalReflexParser;
import ru.iaie.reflex.services.ReflexGrammarAccess;

public class ReflexParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ReflexGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ReflexGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCTypeAccess().getAlternatives(), "rule__CType__Alternatives");
			builder.put(grammarAccess.getCTypeAccess().getAlternatives_3_2(), "rule__CType__Alternatives_3_2");
			builder.put(grammarAccess.getRegisterTypeAccess().getAlternatives(), "rule__RegisterType__Alternatives");
			builder.put(grammarAccess.getCTypeSignSpecAccess().getAlternatives(), "rule__CTypeSignSpec__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
			builder.put(grammarAccess.getRegisterAccess().getGroup(), "rule__Register__Group__0");
			builder.put(grammarAccess.getConstAccess().getGroup(), "rule__Const__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup_2(), "rule__Enum__Group_2__0");
			builder.put(grammarAccess.getEnumMemberAccess().getGroup(), "rule__EnumMember__Group__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_0(), "rule__CType__Group_0__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_1(), "rule__CType__Group_1__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_2(), "rule__CType__Group_2__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_3(), "rule__CType__Group_3__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getTicksAssignment_3(), "rule__Program__TicksAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getConstsAssignment_4(), "rule__Program__ConstsAssignment_4");
			builder.put(grammarAccess.getProgramAccess().getEnumsAssignment_5(), "rule__Program__EnumsAssignment_5");
			builder.put(grammarAccess.getProgramAccess().getFunctionsAssignment_6(), "rule__Program__FunctionsAssignment_6");
			builder.put(grammarAccess.getProgramAccess().getRegistersAssignment_7(), "rule__Program__RegistersAssignment_7");
			builder.put(grammarAccess.getProgramAccess().getProcessesAssignment_8(), "rule__Program__ProcessesAssignment_8");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getStatesAssignment_3(), "rule__Process__StatesAssignment_3");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0(), "rule__Function__ReturnTypeAssignment_0");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getArgTypesAssignment_3(), "rule__Function__ArgTypesAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1(), "rule__Function__ArgTypesAssignment_4_1");
			builder.put(grammarAccess.getRegisterAccess().getTypeAssignment_0(), "rule__Register__TypeAssignment_0");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_1(), "rule__Register__NameAssignment_1");
			builder.put(grammarAccess.getRegisterAccess().getAddr1Assignment_2(), "rule__Register__Addr1Assignment_2");
			builder.put(grammarAccess.getRegisterAccess().getAddr2Assignment_3(), "rule__Register__Addr2Assignment_3");
			builder.put(grammarAccess.getRegisterAccess().getRegSizeAssignment_4(), "rule__Register__RegSizeAssignment_4");
			builder.put(grammarAccess.getConstAccess().getConstIdAssignment_1(), "rule__Const__ConstIdAssignment_1");
			builder.put(grammarAccess.getConstAccess().getConstValueAssignment_2(), "rule__Const__ConstValueAssignment_2");
			builder.put(grammarAccess.getEnumAccess().getEnumMembersAssignment_1(), "rule__Enum__EnumMembersAssignment_1");
			builder.put(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1(), "rule__Enum__EnumMembersAssignment_2_1");
			builder.put(grammarAccess.getEnumMemberAccess().getNameAssignment_0(), "rule__EnumMember__NameAssignment_0");
			builder.put(grammarAccess.getEnumMemberAccess().getValueAssignment_2(), "rule__EnumMember__ValueAssignment_2");
			builder.put(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1(), "rule__CType__SignSpecAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ReflexGrammarAccess grammarAccess;

	@Override
	protected InternalReflexParser createParser() {
		InternalReflexParser result = new InternalReflexParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReflexGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReflexGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
