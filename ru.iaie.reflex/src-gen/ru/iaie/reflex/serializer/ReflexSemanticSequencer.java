/*
 * generated by Xtext 2.19.0
 */
package ru.iaie.reflex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import ru.iaie.reflex.reflex.CType;
import ru.iaie.reflex.reflex.Const;
import ru.iaie.reflex.reflex.EnumMember;
import ru.iaie.reflex.reflex.Function;
import ru.iaie.reflex.reflex.Program;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.Register;
import ru.iaie.reflex.reflex.State;
import ru.iaie.reflex.services.ReflexGrammarAccess;

@SuppressWarnings("all")
public class ReflexSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReflexGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ReflexPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ReflexPackage.CTYPE:
				sequence_CType(context, (CType) semanticObject); 
				return; 
			case ReflexPackage.CONST:
				sequence_Const(context, (Const) semanticObject); 
				return; 
			case ReflexPackage.ENUM:
				sequence_Enum(context, (ru.iaie.reflex.reflex.Enum) semanticObject); 
				return; 
			case ReflexPackage.ENUM_MEMBER:
				sequence_EnumMember(context, (EnumMember) semanticObject); 
				return; 
			case ReflexPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case ReflexPackage.PROCESS:
				sequence_Process(context, (ru.iaie.reflex.reflex.Process) semanticObject); 
				return; 
			case ReflexPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case ReflexPackage.REGISTER:
				sequence_Register(context, (Register) semanticObject); 
				return; 
			case ReflexPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CType returns CType
	 *
	 * Constraint:
	 *     signSpec?=CTypeSignSpec?
	 */
	protected void sequence_CType(ISerializationContext context, CType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Const returns Const
	 *
	 * Constraint:
	 *     (constId=ID constValue=Expression)
	 */
	protected void sequence_Const(ISerializationContext context, Const semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.CONST__CONST_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.CONST__CONST_ID));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.CONST__CONST_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.CONST__CONST_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0(), semanticObject.getConstId());
		feeder.accept(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0(), semanticObject.getConstValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnumMember returns EnumMember
	 *
	 * Constraint:
	 *     (name=ID value=Expression)
	 */
	protected void sequence_EnumMember(ISerializationContext context, EnumMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.ENUM_MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.ENUM_MEMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.ENUM_MEMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.ENUM_MEMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Enum returns Enum
	 *
	 * Constraint:
	 *     (enumMembers+=EnumMember enumMembers+=EnumMember*)
	 */
	protected void sequence_Enum(ISerializationContext context, ru.iaie.reflex.reflex.Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (returnType=CType name=ID argTypes+=CType argTypes+=CType*)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=ID states+=State*)
	 */
	protected void sequence_Process(ISerializationContext context, ru.iaie.reflex.reflex.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ticks?=Tact? 
	 *         consts+=Const* 
	 *         enums+=Enum* 
	 *         functions+=Function* 
	 *         registers+=Register* 
	 *         processes+=Process*
	 *     )
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Register returns Register
	 *
	 * Constraint:
	 *     (type=RegisterType name=ID addr1=INT addr2=INT regSize=REG_SIZE)
	 */
	protected void sequence_Register(ISerializationContext context, Register semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.REGISTER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.REGISTER__TYPE));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.REGISTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.REGISTER__NAME));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.REGISTER__ADDR1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.REGISTER__ADDR1));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.REGISTER__ADDR2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.REGISTER__ADDR2));
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.REGISTER__REG_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.REGISTER__REG_SIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRegisterAccess().getAddr1INTTerminalRuleCall_2_0(), semanticObject.getAddr1());
		feeder.accept(grammarAccess.getRegisterAccess().getAddr2INTTerminalRuleCall_3_0(), semanticObject.getAddr2());
		feeder.accept(grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0(), semanticObject.getRegSize());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ReflexPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ReflexPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
