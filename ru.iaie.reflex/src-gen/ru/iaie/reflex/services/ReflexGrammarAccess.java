/*
 * generated by Xtext 2.19.0
 */
package ru.iaie.reflex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReflexGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTicksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTicksTactTerminalRuleCall_3_0 = (RuleCall)cTicksAssignment_3.eContents().get(0);
		private final Assignment cConstsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstsConstParserRuleCall_4_0 = (RuleCall)cConstsAssignment_4.eContents().get(0);
		private final Assignment cEnumsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumsEnumParserRuleCall_5_0 = (RuleCall)cEnumsAssignment_5.eContents().get(0);
		private final Assignment cFunctionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionsFunctionParserRuleCall_6_0 = (RuleCall)cFunctionsAssignment_6.eContents().get(0);
		private final Assignment cRegistersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRegistersRegisterParserRuleCall_7_0 = (RuleCall)cRegistersAssignment_7.eContents().get(0);
		private final Assignment cProcessesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProcessesProcessParserRuleCall_8_0 = (RuleCall)cProcessesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Program:
		//	"program" name=ID "{"
		//	ticks?=Tact?
		//	consts+=Const*
		//	enums+=Enum*
		//	functions+=Function*
		//	registers+=Register*
		//	processes+=Process*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"program" name=ID "{" ticks?=Tact? consts+=Const* enums+=Enum* functions+=Function* registers+=Register*
		//processes+=Process* "}"
		public Group getGroup() { return cGroup; }
		
		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ticks?=Tact?
		public Assignment getTicksAssignment_3() { return cTicksAssignment_3; }
		
		//Tact
		public RuleCall getTicksTactTerminalRuleCall_3_0() { return cTicksTactTerminalRuleCall_3_0; }
		
		//consts+=Const*
		public Assignment getConstsAssignment_4() { return cConstsAssignment_4; }
		
		//Const
		public RuleCall getConstsConstParserRuleCall_4_0() { return cConstsConstParserRuleCall_4_0; }
		
		//enums+=Enum*
		public Assignment getEnumsAssignment_5() { return cEnumsAssignment_5; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_5_0() { return cEnumsEnumParserRuleCall_5_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_6() { return cFunctionsAssignment_6; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_6_0() { return cFunctionsFunctionParserRuleCall_6_0; }
		
		//registers+=Register*
		public Assignment getRegistersAssignment_7() { return cRegistersAssignment_7; }
		
		//Register
		public RuleCall getRegistersRegisterParserRuleCall_7_0() { return cRegistersRegisterParserRuleCall_7_0; }
		
		//processes+=Process*
		public Assignment getProcessesAssignment_8() { return cProcessesAssignment_8; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_8_0() { return cProcessesProcessParserRuleCall_8_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Process:
		//	"proc" name=ID "{"
		//	states+=State*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"proc" name=ID "{" states+=State* "}"
		public Group getGroup() { return cGroup; }
		
		//"proc"
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//states+=State*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//State:
		//	"state" name=ID "{"
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"state" name=ID "{" "}"
		public Group getGroup() { return cGroup; }
		
		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeCTypeParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypesCTypeParserRuleCall_3_0 = (RuleCall)cArgTypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgTypesCTypeParserRuleCall_4_1_0 = (RuleCall)cArgTypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function:
		//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";"
		public Group getGroup() { return cGroup; }
		
		//returnType=CType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//CType
		public RuleCall getReturnTypeCTypeParserRuleCall_0_0() { return cReturnTypeCTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_3() { return cArgTypesAssignment_3; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_3_0() { return cArgTypesCTypeParserRuleCall_3_0; }
		
		//("," argTypes+=CType)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_4_1() { return cArgTypesAssignment_4_1; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_4_1_0() { return cArgTypesCTypeParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRegisterTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAddr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAddr1INTTerminalRuleCall_2_0 = (RuleCall)cAddr1Assignment_2.eContents().get(0);
		private final Assignment cAddr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddr2INTTerminalRuleCall_3_0 = (RuleCall)cAddr2Assignment_3.eContents().get(0);
		private final Assignment cRegSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegSizeREG_SIZETerminalRuleCall_4_0 = (RuleCall)cRegSizeAssignment_4.eContents().get(0);
		
		//Register:
		//	type=RegisterType name=ID addr1=INT addr2=INT regSize=REG_SIZE;
		@Override public ParserRule getRule() { return rule; }
		
		//type=RegisterType name=ID addr1=INT addr2=INT regSize=REG_SIZE
		public Group getGroup() { return cGroup; }
		
		//type=RegisterType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//RegisterType
		public RuleCall getTypeRegisterTypeEnumRuleCall_0_0() { return cTypeRegisterTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//addr1=INT
		public Assignment getAddr1Assignment_2() { return cAddr1Assignment_2; }
		
		//INT
		public RuleCall getAddr1INTTerminalRuleCall_2_0() { return cAddr1INTTerminalRuleCall_2_0; }
		
		//addr2=INT
		public Assignment getAddr2Assignment_3() { return cAddr2Assignment_3; }
		
		//INT
		public RuleCall getAddr2INTTerminalRuleCall_3_0() { return cAddr2INTTerminalRuleCall_3_0; }
		
		//regSize=REG_SIZE
		public Assignment getRegSizeAssignment_4() { return cRegSizeAssignment_4; }
		
		//REG_SIZE
		public RuleCall getRegSizeREG_SIZETerminalRuleCall_4_0() { return cRegSizeREG_SIZETerminalRuleCall_4_0; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstIdIDTerminalRuleCall_1_0 = (RuleCall)cConstIdAssignment_1.eContents().get(0);
		private final Assignment cConstValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstValueExpressionParserRuleCall_2_0 = (RuleCall)cConstValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Const:
		//	"const" constId=ID constValue=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"const" constId=ID constValue=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//constId=ID
		public Assignment getConstIdAssignment_1() { return cConstIdAssignment_1; }
		
		//ID
		public RuleCall getConstIdIDTerminalRuleCall_1_0() { return cConstIdIDTerminalRuleCall_1_0; }
		
		//constValue=Expression
		public Assignment getConstValueAssignment_2() { return cConstValueAssignment_2; }
		
		//Expression
		public RuleCall getConstValueExpressionParserRuleCall_2_0() { return cConstValueExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_1_0 = (RuleCall)cEnumMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEnumMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_2_1_0 = (RuleCall)cEnumMembersAssignment_2_1.eContents().get(0);
		
		//Enum:
		//	"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)*
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_1() { return cEnumMembersAssignment_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_1_0() { return cEnumMembersEnumMemberParserRuleCall_1_0; }
		
		//(',' enumMembers+=EnumMember)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_2_1() { return cEnumMembersAssignment_2_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_2_1_0() { return cEnumMembersEnumMemberParserRuleCall_2_1_0; }
	}
	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//EnumMember:
		//	name=ID "=" value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" value=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Expression");
		private final Keyword cExprKeyword = (Keyword)rule.eContents().get(1);
		
		//Expression:
		//	"expr";
		@Override public ParserRule getRule() { return rule; }
		
		//"expr"
		public Keyword getExprKeyword() { return cExprKeyword; }
	}
	public class CTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVOID_C_TYPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cFLOAT_C_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cDOUBLE_C_TYPETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSignSpecAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignSpecCTypeSignSpecEnumRuleCall_3_1_0 = (RuleCall)cSignSpecAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final RuleCall cSHORT_C_TYPETerminalRuleCall_3_2_0 = (RuleCall)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cINT_C_TYPETerminalRuleCall_3_2_1 = (RuleCall)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cLONG_C_TYPETerminalRuleCall_3_2_2 = (RuleCall)cAlternatives_3_2.eContents().get(2);
		
		//CType:
		//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
		//	INT_C_TYPE | LONG_C_TYPE);
		@Override public ParserRule getRule() { return rule; }
		
		//{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
		//INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CType} VOID_C_TYPE
		public Group getGroup_0() { return cGroup_0; }
		
		//{CType}
		public Action getCTypeAction_0_0() { return cCTypeAction_0_0; }
		
		//VOID_C_TYPE
		public RuleCall getVOID_C_TYPETerminalRuleCall_0_1() { return cVOID_C_TYPETerminalRuleCall_0_1; }
		
		//{CType} FLOAT_C_TYPE
		public Group getGroup_1() { return cGroup_1; }
		
		//{CType}
		public Action getCTypeAction_1_0() { return cCTypeAction_1_0; }
		
		//FLOAT_C_TYPE
		public RuleCall getFLOAT_C_TYPETerminalRuleCall_1_1() { return cFLOAT_C_TYPETerminalRuleCall_1_1; }
		
		//{CType} DOUBLE_C_TYPE
		public Group getGroup_2() { return cGroup_2; }
		
		//{CType}
		public Action getCTypeAction_2_0() { return cCTypeAction_2_0; }
		
		//DOUBLE_C_TYPE
		public RuleCall getDOUBLE_C_TYPETerminalRuleCall_2_1() { return cDOUBLE_C_TYPETerminalRuleCall_2_1; }
		
		//{CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Group getGroup_3() { return cGroup_3; }
		
		//{CType}
		public Action getCTypeAction_3_0() { return cCTypeAction_3_0; }
		
		//signSpec?=CTypeSignSpec?
		public Assignment getSignSpecAssignment_3_1() { return cSignSpecAssignment_3_1; }
		
		//CTypeSignSpec
		public RuleCall getSignSpecCTypeSignSpecEnumRuleCall_3_1_0() { return cSignSpecCTypeSignSpecEnumRuleCall_3_1_0; }
		
		//(SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//SHORT_C_TYPE
		public RuleCall getSHORT_C_TYPETerminalRuleCall_3_2_0() { return cSHORT_C_TYPETerminalRuleCall_3_2_0; }
		
		//INT_C_TYPE
		public RuleCall getINT_C_TYPETerminalRuleCall_3_2_1() { return cINT_C_TYPETerminalRuleCall_3_2_1; }
		
		//LONG_C_TYPE
		public RuleCall getLONG_C_TYPETerminalRuleCall_3_2_2() { return cLONG_C_TYPETerminalRuleCall_3_2_2; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Time");
		private final Keyword cTimeKeyword = (Keyword)rule.eContents().get(1);
		
		//Time:
		//	"time";
		@Override public ParserRule getRule() { return rule; }
		
		//"time"
		public Keyword getTimeKeyword() { return cTimeKeyword; }
	}
	
	public class RegisterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RegisterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTInputKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTOutputKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RegisterType:
		//	INPUT='input' | OUTPUT='output';
		public EnumRule getRule() { return rule; }
		
		//INPUT='input' | OUTPUT='output'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT='input'
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }
		
		//'input'
		public Keyword getINPUTInputKeyword_0_0() { return cINPUTInputKeyword_0_0; }
		
		//OUTPUT='output'
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }
		
		//'output'
		public Keyword getOUTPUTOutputKeyword_1_0() { return cOUTPUTOutputKeyword_1_0; }
	}
	public class CTypeSignSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CTypeSignSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIGNEDSignedKeyword_0_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNSIGNEDUnsignedKeyword_1_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CTypeSignSpec:
		//	SIGNED="signed" | UNSIGNED="unsigned";
		public EnumRule getRule() { return rule; }
		
		//SIGNED="signed" | UNSIGNED="unsigned"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIGNED="signed"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_0() { return cSIGNEDEnumLiteralDeclaration_0; }
		
		//"signed"
		public Keyword getSIGNEDSignedKeyword_0_0() { return cSIGNEDSignedKeyword_0_0; }
		
		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_1() { return cUNSIGNEDEnumLiteralDeclaration_1; }
		
		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_1_0() { return cUNSIGNEDUnsignedKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final ProcessElements pProcess;
	private final StateElements pState;
	private final FunctionElements pFunction;
	private final RegisterTypeElements eRegisterType;
	private final RegisterElements pRegister;
	private final ConstElements pConst;
	private final EnumElements pEnum;
	private final EnumMemberElements pEnumMember;
	private final ExpressionElements pExpression;
	private final CTypeElements pCType;
	private final CTypeSignSpecElements eCTypeSignSpec;
	private final TerminalRule tVOID_C_TYPE;
	private final TerminalRule tFLOAT_C_TYPE;
	private final TerminalRule tDOUBLE_C_TYPE;
	private final TerminalRule tSHORT_C_TYPE;
	private final TerminalRule tINT_C_TYPE;
	private final TerminalRule tLONG_C_TYPE;
	private final TimeElements pTime;
	private final TerminalRule tTact;
	private final TerminalRule tREG_SIZE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReflexGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pProcess = new ProcessElements();
		this.pState = new StateElements();
		this.pFunction = new FunctionElements();
		this.eRegisterType = new RegisterTypeElements();
		this.pRegister = new RegisterElements();
		this.pConst = new ConstElements();
		this.pEnum = new EnumElements();
		this.pEnumMember = new EnumMemberElements();
		this.pExpression = new ExpressionElements();
		this.pCType = new CTypeElements();
		this.eCTypeSignSpec = new CTypeSignSpecElements();
		this.tVOID_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.VOID_C_TYPE");
		this.tFLOAT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FLOAT_C_TYPE");
		this.tDOUBLE_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DOUBLE_C_TYPE");
		this.tSHORT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SHORT_C_TYPE");
		this.tINT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.INT_C_TYPE");
		this.tLONG_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LONG_C_TYPE");
		this.pTime = new TimeElements();
		this.tTact = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Tact");
		this.tREG_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.REG_SIZE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.iaie.reflex.Reflex".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"program" name=ID "{"
	//	ticks?=Tact?
	//	consts+=Const*
	//	enums+=Enum*
	//	functions+=Function*
	//	registers+=Register*
	//	processes+=Process*
	//	"}";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Process:
	//	"proc" name=ID "{"
	//	states+=State*
	//	"}";
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//State:
	//	"state" name=ID "{"
	//	"}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Function:
	//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//enum RegisterType:
	//	INPUT='input' | OUTPUT='output';
	public RegisterTypeElements getRegisterTypeAccess() {
		return eRegisterType;
	}
	
	public EnumRule getRegisterTypeRule() {
		return getRegisterTypeAccess().getRule();
	}
	
	//Register:
	//	type=RegisterType name=ID addr1=INT addr2=INT regSize=REG_SIZE;
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Const:
	//	"const" constId=ID constValue=Expression ";";
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Enum:
	//	"enum" enumMembers+=EnumMember (',' enumMembers+=EnumMember)*;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumMember:
	//	name=ID "=" value=Expression;
	public EnumMemberElements getEnumMemberAccess() {
		return pEnumMember;
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}
	
	//Expression:
	//	"expr";
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//CType:
	//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
	//	INT_C_TYPE | LONG_C_TYPE);
	public CTypeElements getCTypeAccess() {
		return pCType;
	}
	
	public ParserRule getCTypeRule() {
		return getCTypeAccess().getRule();
	}
	
	//enum CTypeSignSpec:
	//	SIGNED="signed" | UNSIGNED="unsigned";
	public CTypeSignSpecElements getCTypeSignSpecAccess() {
		return eCTypeSignSpec;
	}
	
	public EnumRule getCTypeSignSpecRule() {
		return getCTypeSignSpecAccess().getRule();
	}
	
	//terminal VOID_C_TYPE:
	//	"void";
	public TerminalRule getVOID_C_TYPERule() {
		return tVOID_C_TYPE;
	}
	
	//terminal FLOAT_C_TYPE:
	//	"float";
	public TerminalRule getFLOAT_C_TYPERule() {
		return tFLOAT_C_TYPE;
	}
	
	//terminal DOUBLE_C_TYPE:
	//	"double";
	public TerminalRule getDOUBLE_C_TYPERule() {
		return tDOUBLE_C_TYPE;
	}
	
	//terminal SHORT_C_TYPE:
	//	"short";
	public TerminalRule getSHORT_C_TYPERule() {
		return tSHORT_C_TYPE;
	}
	
	//terminal INT_C_TYPE:
	//	"int";
	public TerminalRule getINT_C_TYPERule() {
		return tINT_C_TYPE;
	}
	
	//terminal LONG_C_TYPE:
	//	"long";
	public TerminalRule getLONG_C_TYPERule() {
		return tLONG_C_TYPE;
	}
	
	//Time:
	//	"time";
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//terminal Tact:
	//	"tact";
	public TerminalRule getTactRule() {
		return tTact;
	}
	
	//terminal REG_SIZE returns ecore::EInt:
	//	"8" | "16";
	public TerminalRule getREG_SIZERule() {
		return tREG_SIZE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
